package [% config.base %];

[% INCLUDE "perl_stuff" %]

use [% config.base %]::DB;

sub new
{
    my ($package, %inputs) = @_;
    my $db_file = $inputs{db_file};
    my $object = {};
    $object->{db} = [% config.base %]::DB->new (%inputs);
    return bless $object;
}

sub postcode_to_address
{
    my ($object, $postcode) = @_;
    my $addresses = $object->{db}->lookup_postcode ($postcode);
    return $addresses;
}

1;

__END__

=head1 NAME

[% config.base %] - [% config.abstract %]

=head1 SYNOPSIS

    my $gpj = [% config.base %]->new (
        db_file => '/path/to/database/file',
    );
    my $address = $gpj->postcode_to_address ('3050053');
    # Now $address contains the address as a hash reference.

=head1 DESCRIPTION

This package contains a series of modules for handling the files of
postcodes supplied by Japan Post. L<[% config.base %]::Update>
downloads the data files.  L<[% config.base %]::Process> parses the
data files, and can improve the data.  L<[% config.base %]::DB>
inserts the postcode data read by the processing module into an SQLite
database. The main module provides a way to access the postcodes in an
existing SQLite database.

=head2 Building the database

To build the database, use the scripts in the F<xt> directory of the
distribution. You need to edit these scripts to point to the files you
want to use.

The script F<update.pl> uses the L<[% config.base %]::Update> module
to update the CSV files on your hard disk from the Japan Post Office
web site. It downloads two files, F<ken_all.zip> and
F<jigyosyo.zip>. The user then needs to unzip these files.

The script F<insert-all.pl> inserts the file F<KEN_ALL.CSV> into a
database specified in the module F<PostCodeFiles.pm> found in the
F<xt> directory. The user needs to edit this file to point to
whereever the database files should be created. The script
F<insert-jigyosyo.pl> inserts the F<JIGYOSYO.CSV> into the database
specified. Again, the user needs to edit the F<PostCodeFiles.pm>
module to specify where things should go.

=head1 METHODS

=head2 new

    my $gpj = [% config.base %]->new (
        db_file => '/path/to/database/file',
    );

"New" creates a new postcode-lookup object. The parameter is the path
to the database file, which is the file created in the stage
L<Building the database> above.

=head2 postcode_to_address

    my $address = $gpj->postcode_to_address ('9012204');

[% INCLUDE "lookup-postcode" %]
#line 86 "Main.pm.tmpl"

=head1 SEE ALSO

L<Number::ZipCode::JP> - validate Japanese zip-codes. This is a huge
regular expression made from the same data file which this module
reads, which can be used to validate a Japanese postal code.

[% INCLUDE "author" %]
#line 95 "Main.pm.tmpl"

# Local variables:
# mode: perl
# End:
